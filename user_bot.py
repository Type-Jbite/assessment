# user_bot.py

import logging
from telegram import Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, Application, CommandHandler, MessageHandler, filters
from datetime import datetime
import pytz
import aiohttp
import json
import asyncio

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
USER_BOT_TOKEN = "8491896072:AAEXBmlsdjFKKinRB-rCbH-ZcFfOktay5_o"
ADMIN_CHAT_ID = "-1002729661400"

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
user_data = {}
location_attempts = {}

# === –ò–ú–ü–û–†–¢ –ò–ó SHARED.PY ===
from shared import (
    CLASSROOM_LAT, CLASSROOM_LON, ALLOWED_RADIUS,
    calculate_distance
)

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def is_working_time():
    now = datetime.now()
    if now.weekday() >= 5:
        return False
    return True

async def send_alert_to_admin(fio: str, username: str, user_id: int, distance: float, is_new: bool = False):
    moscow_tz = pytz.timezone('Europe/Moscow')
    time_now = datetime.now(moscow_tz).strftime("%d.%m.%Y –≤ %H:%M:%S")
    emoji = "üéâ" if is_new else "‚úÖ"
    status = "–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!" if is_new else "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ"
    message_text = f"{emoji} <b>{status}</b>\n\n" \
                   f"<b>–£—á–µ–Ω–∏–∫:</b> {fio}\n" \
                   f"<b>–í—Ä–µ–º—è:</b> {time_now}\n" \
                   f"<b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–±–∏–Ω–µ—Ç–∞:</b> {distance:.0f} –º\n" \
                   f"<b>Username:</b> @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n" \
                   f"<b>User ID:</b> <code>{user_id}</code>\n\n" \
                   f"<b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {CLASSROOM_LAT}, {CLASSROOM_LON}"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"https://api.telegram.org/bot{USER_BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": ADMIN_CHAT_ID,
                    "text": message_text,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": True
                },
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                if response.status == 200:
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {fio} ({distance}–º)")
                else:
                    text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status} - {text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        first_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        username = update.effective_user.username or "–Ω–µ—Ç username"

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –Ω–∞–∂–∞–ª /start")

        if not is_working_time():
            await update.message.reply_text(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç–º–µ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É—á–µ–±–Ω–æ–µ –≤—Ä–µ–º—è:\n"
                "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞ —Å 8:00 –¥–æ 20:00",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        if user_id not in location_attempts:
            location_attempts[user_id] = 0

        if location_attempts[user_id] >= 3:
            await update.message.reply_text(
                "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        existing_fio = None
        if user_id in user_data and 'fio' in user_data[user_id]:
            existing_fio = user_data[user_id]['fio']

        keyboard = [[
            KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        ]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n"
            "–î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.\n\n"
            "üìç –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º\n"
            "‚úÖ –û—Ç–º–µ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —É—á–µ–±–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ",
            reply_markup=reply_markup
        )

        user_data[user_id] = {
            'state': 'awaiting_location',
            'first_name': first_name,
            'fio': existing_fio
        }

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (fio —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {existing_fio})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        username = update.effective_user.username or "–Ω–µ—Ç username"

        if user_id not in user_data or user_data[user_id].get('state') != 'awaiting_location':
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ—Ç–∫–∏",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        user_lat = update.message.location.latitude
        user_lon = update.message.location.longitude
        distance_km = calculate_distance(CLASSROOM_LAT, CLASSROOM_LON, user_lat, user_lon)
        distance_meters = distance_km * 1000

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: {distance_meters:.0f}–º –æ—Ç –∫–∞–±–∏–Ω–µ—Ç–∞")

        if distance_meters > ALLOWED_RADIUS * 1000:
            location_attempts[user_id] = location_attempts.get(user_id, 0) + 1
            attempts_left = 3 - location_attempts[user_id]
            await update.message.reply_text(
                f"‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–Ω–µ —É—á–µ–±–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞!\n"
                f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–±–∏–Ω–µ—Ç–∞: {distance_meters:.0f} –º–µ—Ç—Ä–æ–≤\n"
                f"‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è: within {ALLOWED_RADIUS * 1000:.0f} –º–µ—Ç—Ä–æ–≤\n\n"
                f"üî¢ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –∏–∑–¥–∞–ª–µ–∫–∞: {username} ({distance_meters:.0f}–º)")
            return

        location_attempts[user_id] = 0

        if user_id in user_data and 'fio' in user_data[user_id] and user_data[user_id]['fio']:
            fio = user_data[user_id]['fio']
            await send_alert_to_admin(fio, username, user_id, distance_meters, is_new=False)
            await update.message.reply_text(
                f"‚úÖ {fio}, –≤–∞—à–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ!\n"
                f"üìè –í —Ä–∞–¥–∏—É—Å–µ: {distance_meters:.0f} –º–µ—Ç—Ä–æ–≤",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {fio} ({distance_meters:.0f}–º)")
        else:
            await update.message.reply_text(
                "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –≤ —É—á–µ–±–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
                reply_markup=ReplyKeyboardRemove()
            )
            user_data[user_id] = {'state': 'awaiting_fio', 'location_verified': True}
            logger.info(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è {user_id}, –æ–∂–∏–¥–∞–Ω–∏–µ –§–ò–û")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        username = update.effective_user.username or "–Ω–µ—Ç username"
        user_info = user_data.get(user_id, {})

        if user_info.get('state') == 'awaiting_fio' and user_info.get('location_verified'):
            fio = update.message.text.strip()
            if len(fio) < 2:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
                return

            user_data[user_id] = {'fio': fio, 'state': 'registered', 'location_verified': True}
            await send_alert_to_admin(fio, username, user_id, 5, is_new=True)
            await update.message.reply_text(
                f"üéâ –°–ø–∞—Å–∏–±–æ, {fio}! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ —Å–Ω–æ–≤–∞ - "
                "—Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–º–µ—Ç–∏—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ!",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {fio}")

        else:
            await update.message.reply_text(
                "–î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º üì±\n"
                "–ï—Å–ª–∏ —Ç—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start",
                reply_markup=ReplyKeyboardRemove()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("‚úÖ User –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", CLASSROOM_LAT, CLASSROOM_LON)
    print("üìè –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å:", ALLOWED_RADIUS * 1000, "–º–µ—Ç—Ä–æ–≤")
    print("‚è∞ –†–∞–±–æ—Ç–∞–µ—Ç: –ü–Ω-–ü—Ç, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ")
    
    try:
        application = Application.builder().token(USER_BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.LOCATION, handle_location))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("üîÑ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
